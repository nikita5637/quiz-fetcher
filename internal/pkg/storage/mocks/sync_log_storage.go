// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/nikita5637/quiz-fetcher/internal/pkg/model"
	mock "github.com/stretchr/testify/mock"
)

// SyncLogStorage is an autogenerated mock type for the SyncLogStorage type
type SyncLogStorage struct {
	mock.Mock
}

type SyncLogStorage_Expecter struct {
	mock *mock.Mock
}

func (_m *SyncLogStorage) EXPECT() *SyncLogStorage_Expecter {
	return &SyncLogStorage_Expecter{mock: &_m.Mock}
}

// FindLastSync provides a mock function with given fields: ctx, name
func (_m *SyncLogStorage) FindLastSync(ctx context.Context, name string) (model.SyncLog, error) {
	ret := _m.Called(ctx, name)

	var r0 model.SyncLog
	if rf, ok := ret.Get(0).(func(context.Context, string) model.SyncLog); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Get(0).(model.SyncLog)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SyncLogStorage_FindLastSync_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindLastSync'
type SyncLogStorage_FindLastSync_Call struct {
	*mock.Call
}

// FindLastSync is a helper method to define mock.On call
//  - ctx context.Context
//  - name string
func (_e *SyncLogStorage_Expecter) FindLastSync(ctx interface{}, name interface{}) *SyncLogStorage_FindLastSync_Call {
	return &SyncLogStorage_FindLastSync_Call{Call: _e.mock.On("FindLastSync", ctx, name)}
}

func (_c *SyncLogStorage_FindLastSync_Call) Run(run func(ctx context.Context, name string)) *SyncLogStorage_FindLastSync_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *SyncLogStorage_FindLastSync_Call) Return(_a0 model.SyncLog, _a1 error) *SyncLogStorage_FindLastSync_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// Insert provides a mock function with given fields: ctx, sync
func (_m *SyncLogStorage) Insert(ctx context.Context, sync model.SyncLog) (int, error) {
	ret := _m.Called(ctx, sync)

	var r0 int
	if rf, ok := ret.Get(0).(func(context.Context, model.SyncLog) int); ok {
		r0 = rf(ctx, sync)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, model.SyncLog) error); ok {
		r1 = rf(ctx, sync)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SyncLogStorage_Insert_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Insert'
type SyncLogStorage_Insert_Call struct {
	*mock.Call
}

// Insert is a helper method to define mock.On call
//  - ctx context.Context
//  - sync model.SyncLog
func (_e *SyncLogStorage_Expecter) Insert(ctx interface{}, sync interface{}) *SyncLogStorage_Insert_Call {
	return &SyncLogStorage_Insert_Call{Call: _e.mock.On("Insert", ctx, sync)}
}

func (_c *SyncLogStorage_Insert_Call) Run(run func(ctx context.Context, sync model.SyncLog)) *SyncLogStorage_Insert_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.SyncLog))
	})
	return _c
}

func (_c *SyncLogStorage_Insert_Call) Return(_a0 int, _a1 error) *SyncLogStorage_Insert_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// Update provides a mock function with given fields: ctx, sync
func (_m *SyncLogStorage) Update(ctx context.Context, sync model.SyncLog) error {
	ret := _m.Called(ctx, sync)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.SyncLog) error); ok {
		r0 = rf(ctx, sync)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SyncLogStorage_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type SyncLogStorage_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//  - ctx context.Context
//  - sync model.SyncLog
func (_e *SyncLogStorage_Expecter) Update(ctx interface{}, sync interface{}) *SyncLogStorage_Update_Call {
	return &SyncLogStorage_Update_Call{Call: _e.mock.On("Update", ctx, sync)}
}

func (_c *SyncLogStorage_Update_Call) Run(run func(ctx context.Context, sync model.SyncLog)) *SyncLogStorage_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.SyncLog))
	})
	return _c
}

func (_c *SyncLogStorage_Update_Call) Return(_a0 error) *SyncLogStorage_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

type mockConstructorTestingTNewSyncLogStorage interface {
	mock.TestingT
	Cleanup(func())
}

// NewSyncLogStorage creates a new instance of SyncLogStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewSyncLogStorage(t mockConstructorTestingTNewSyncLogStorage) *SyncLogStorage {
	mock := &SyncLogStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
