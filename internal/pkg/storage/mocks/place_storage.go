// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mysql "github.com/nikita5637/quiz-fetcher/internal/pkg/storage/mysql"
	mock "github.com/stretchr/testify/mock"
)

// PlaceStorage is an autogenerated mock type for the PlaceStorage type
type PlaceStorage struct {
	mock.Mock
}

type PlaceStorage_Expecter struct {
	mock *mock.Mock
}

func (_m *PlaceStorage) EXPECT() *PlaceStorage_Expecter {
	return &PlaceStorage_Expecter{mock: &_m.Mock}
}

// GetPlaceByNameAndAddress provides a mock function with given fields: ctx, name, address
func (_m *PlaceStorage) GetPlaceByNameAndAddress(ctx context.Context, name string, address string) (mysql.Place, error) {
	ret := _m.Called(ctx, name, address)

	var r0 mysql.Place
	if rf, ok := ret.Get(0).(func(context.Context, string, string) mysql.Place); ok {
		r0 = rf(ctx, name, address)
	} else {
		r0 = ret.Get(0).(mysql.Place)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, name, address)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PlaceStorage_GetPlaceByNameAndAddress_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPlaceByNameAndAddress'
type PlaceStorage_GetPlaceByNameAndAddress_Call struct {
	*mock.Call
}

// GetPlaceByNameAndAddress is a helper method to define mock.On call
//  - ctx context.Context
//  - name string
//  - address string
func (_e *PlaceStorage_Expecter) GetPlaceByNameAndAddress(ctx interface{}, name interface{}, address interface{}) *PlaceStorage_GetPlaceByNameAndAddress_Call {
	return &PlaceStorage_GetPlaceByNameAndAddress_Call{Call: _e.mock.On("GetPlaceByNameAndAddress", ctx, name, address)}
}

func (_c *PlaceStorage_GetPlaceByNameAndAddress_Call) Run(run func(ctx context.Context, name string, address string)) *PlaceStorage_GetPlaceByNameAndAddress_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *PlaceStorage_GetPlaceByNameAndAddress_Call) Return(_a0 mysql.Place, _a1 error) *PlaceStorage_GetPlaceByNameAndAddress_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

type mockConstructorTestingTNewPlaceStorage interface {
	mock.TestingT
	Cleanup(func())
}

// NewPlaceStorage creates a new instance of PlaceStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewPlaceStorage(t mockConstructorTestingTNewPlaceStorage) *PlaceStorage {
	mock := &PlaceStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
