package mysql

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"

	"github.com/go-xorm/builder"
	"github.com/nikita5637/quiz-fetcher/internal/pkg/logger"

	"github.com/nikita5637/quiz-fetcher/internal/pkg/tx"
)

// GameTypeMatch represents a row from 'game_type_match'.
type GameTypeMatch struct {
	ID          int            `json:"id"`          // id
	Description sql.NullString `json:"description"` // description
	Name        sql.NullString `json:"name"`        // name
	GameType    uint8          `json:"game_type"`   // game_type
}

// GameTypeMatchStorage is GameTypeMatch service implementation
type GameTypeMatchStorage struct {
	db *tx.Manager
}

// NewGameTypeMatchStorage creates new instance of GameTypeMatchStorage
func NewGameTypeMatchStorage(txManager *tx.Manager) *GameTypeMatchStorage {
	return &GameTypeMatchStorage{
		db: txManager,
	}
}

// GetAll returns all records
func (s *GameTypeMatchStorage) GetAll(ctx context.Context) ([]GameTypeMatch, error) {
	return s.Find(ctx, nil, "")
}

// Find perform find request by params
func (s *GameTypeMatchStorage) Find(ctx context.Context, q builder.Cond, sort string) ([]GameTypeMatch, error) {
	query := `SELECT id, description, name, game_type FROM game_type_match`

	var args []interface{}

	if q != nil {
		var where string
		var err error
		where, args, err = builder.ToSQL(q)
		if err != nil {
			return nil, err
		}
		query += ` WHERE ` + where
	}

	if sort != "" {
		query += ` ` + getOrderStmt(sort)
	}

	rows, err := s.db.Sync(ctx).QueryContext(ctx, query, args...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	var items []GameTypeMatch

	for rows.Next() {
		var item GameTypeMatch
		if err := rows.Scan(
			&item.ID,
			&item.Description,
			&item.Name,
			&item.GameType,
		); err != nil {
			return nil, err
		}

		items = append(items, item)
	}

	return items, nil
}

// FindWithLimit perform find request by params, offset and limit
func (s *GameTypeMatchStorage) FindWithLimit(ctx context.Context, q builder.Cond, sort string, offset, limit uint64) ([]GameTypeMatch, error) {
	query := `SELECT id, description, name, game_type FROM game_type_match`

	var args []interface{}

	if q != nil {
		var where string
		var err error
		where, args, err = builder.ToSQL(q)
		if err != nil {
			return nil, err
		}
		query += ` WHERE ` + where
	}

	if sort != "" {
		query += ` ` + getOrderStmt(sort)
	}

	if limit != 0 {
		query += ` OFFSET ? LIMIT ?`
		args = append(args, offset)
		args = append(args, limit)
	}

	rows, err := s.db.Sync(ctx).QueryContext(ctx, query, args...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	var items []GameTypeMatch

	for rows.Next() {
		var item GameTypeMatch
		if err := rows.Scan(
			&item.ID,
			&item.Description,
			&item.Name,
			&item.GameType,
		); err != nil {
			return nil, err
		}

		items = append(items, item)
	}

	return items, nil
}

// Total return count(*) by params
func (s *GameTypeMatchStorage) Total(ctx context.Context, q builder.Cond) (uint64, error) {
	query := `SELECT count(*) FROM game_type_match`

	var args []interface{}

	if q != nil {
		var where string
		var err error
		where, args, err = builder.ToSQL(q)
		if err != nil {
			return 0, err
		}
		query += ` WHERE ` + where
	}

	rows, err := s.db.Sync(ctx).QueryContext(ctx, query, args...)
	if err != nil {
		return 0, err
	}
	defer rows.Close()

	var count uint64

	for rows.Next() {
		if err := rows.Scan(
			&count,
		); err != nil {
			return 0, err
		}
	}

	return count, nil
}

// Insert inserts the GameTypeMatch to the database.
func (s *GameTypeMatchStorage) Insert(ctx context.Context, item GameTypeMatch) (int, error) {
	// insert (primary key generated and returned by database)
	const sqlstr = `INSERT INTO game_type_match (` +
		`description, name, game_type` +
		`) VALUES (` +
		`?, ?, ?` +
		`)`
	// run
	logger.Debugf(ctx, sqlstr, item.Description, item.Name, item.GameType)

	res, err := s.db.Master(ctx).ExecContext(ctx, sqlstr, item.Description, item.Name, item.GameType)
	if err != nil {
		return 0, err
	}
	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return 0, err
	}

	return int(id), nil
}

// Update updates a GameTypeMatch in the database.
func (s *GameTypeMatchStorage) Update(ctx context.Context, item GameTypeMatch) error {
	// update with primary key
	const sqlstr = `UPDATE game_type_match SET ` +
		`description = ?, name = ?, game_type = ? ` +
		`WHERE id = ?`
	// run
	logger.Debugf(ctx, sqlstr, item.Description, item.Name, item.GameType, item.ID)
	if _, err := s.db.Master(ctx).ExecContext(ctx, sqlstr, item.Description, item.Name, item.GameType, item.ID); err != nil {
		return err
	}

	return nil
}

// Upsert performs an upsert for GameTypeMatch.
func (s *GameTypeMatchStorage) Upsert(ctx context.Context, item GameTypeMatch) error {
	// upsert
	const sqlstr = `INSERT INTO game_type_match (` +
		`id, description, name, game_type` +
		`) VALUES (` +
		`?, ?, ?, ?` +
		`)` +
		` ON DUPLICATE KEY UPDATE ` +
		`description = VALUES(description), name = VALUES(name), game_type = VALUES(game_type)`
	// run
	logger.Debugf(ctx, sqlstr, item.ID, item.Description, item.Name, item.GameType)
	if _, err := s.db.Master(ctx).ExecContext(ctx, sqlstr, item.ID, item.Description, item.Name, item.GameType); err != nil {
		return err
	}

	return nil
}

// Delete deletes the GameTypeMatch from the database.
func (s *GameTypeMatchStorage) Delete(ctx context.Context, id int) error {
	// delete with single primary key
	const sqlstr = `DELETE FROM game_type_match ` +
		`WHERE id = ?`
	// run
	logger.Debugf(ctx, sqlstr, id)

	if _, err := s.db.Master(ctx).ExecContext(ctx, sqlstr, id); err != nil {
		return err
	}

	return nil
}

// GetGameTypeMatchByDescription retrieves a row from 'game_type_match' as a GameTypeMatch.
//
// Generated from index 'description'.
func (s *GameTypeMatchStorage) GetGameTypeMatchByDescription(ctx context.Context, description sql.NullString) (*GameTypeMatch, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, description, name, game_type ` +
		`FROM game_type_match ` +
		`WHERE description = ?`
	// run
	logger.Debugf(ctx, sqlstr, description)
	gtm := GameTypeMatch{}
	if err := s.db.Sync(ctx).QueryRowContext(ctx, sqlstr, description).Scan(&gtm.ID, &gtm.Description, &gtm.Name, &gtm.GameType); err != nil {
		return nil, err
	}
	return &gtm, nil
}

// GetGameTypeMatchByID retrieves a row from 'game_type_match' as a GameTypeMatch.
//
// Generated from index 'game_type_match_id_pkey'.
func (s *GameTypeMatchStorage) GetGameTypeMatchByID(ctx context.Context, id int) (*GameTypeMatch, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, description, name, game_type ` +
		`FROM game_type_match ` +
		`WHERE id = ?`
	// run
	logger.Debugf(ctx, sqlstr, id)
	gtm := GameTypeMatch{}
	if err := s.db.Sync(ctx).QueryRowContext(ctx, sqlstr, id).Scan(&gtm.ID, &gtm.Description, &gtm.Name, &gtm.GameType); err != nil {
		return nil, err
	}
	return &gtm, nil
}

// GetGameTypeMatchByName retrieves a row from 'game_type_match' as a GameTypeMatch.
//
// Generated from index 'name'.
func (s *GameTypeMatchStorage) GetGameTypeMatchByName(ctx context.Context, name sql.NullString) (*GameTypeMatch, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, description, name, game_type ` +
		`FROM game_type_match ` +
		`WHERE name = ?`
	// run
	logger.Debugf(ctx, sqlstr, name)
	gtm := GameTypeMatch{}
	if err := s.db.Sync(ctx).QueryRowContext(ctx, sqlstr, name).Scan(&gtm.ID, &gtm.Description, &gtm.Name, &gtm.GameType); err != nil {
		return nil, err
	}
	return &gtm, nil
}
