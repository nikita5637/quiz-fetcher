package mysql

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"time"

	"github.com/go-xorm/builder"
	"github.com/nikita5637/quiz-fetcher/internal/pkg/logger"

	"github.com/nikita5637/quiz-fetcher/internal/pkg/tx"
)

// SyncLog represents a row from 'sync_log'.
type SyncLog struct {
	ID         int       `json:"id"`           // id
	Name       string    `json:"name"`         // name
	LastSyncAt time.Time `json:"last_sync_at"` // last_sync_at
	Status     int       `json:"status"`       // status
}

// SyncLogStorage is SyncLog service implementation
type SyncLogStorage struct {
	db *tx.Manager
}

// NewSyncLogStorage creates new instance of SyncLogStorage
func NewSyncLogStorage(txManager *tx.Manager) *SyncLogStorage {
	return &SyncLogStorage{
		db: txManager,
	}
}

// GetAll returns all records
func (s *SyncLogStorage) GetAll(ctx context.Context) ([]SyncLog, error) {
	return s.Find(ctx, nil, "")
}

// Find perform find request by params
func (s *SyncLogStorage) Find(ctx context.Context, q builder.Cond, sort string) ([]SyncLog, error) {
	query := `SELECT id, name, last_sync_at, status FROM sync_log`

	var args []interface{}

	if q != nil {
		var where string
		var err error
		where, args, err = builder.ToSQL(q)
		if err != nil {
			return nil, err
		}
		query += ` WHERE ` + where
	}

	if sort != "" {
		query += ` ` + getOrderStmt(sort)
	}

	rows, err := s.db.Sync(ctx).QueryContext(ctx, query, args...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	var items []SyncLog

	for rows.Next() {
		var item SyncLog
		if err := rows.Scan(
			&item.ID,
			&item.Name,
			&item.LastSyncAt,
			&item.Status,
		); err != nil {
			return nil, err
		}

		items = append(items, item)
	}

	return items, nil
}

// FindWithLimit perform find request by params, offset and limit
func (s *SyncLogStorage) FindWithLimit(ctx context.Context, q builder.Cond, sort string, offset, limit uint64) ([]SyncLog, error) {
	query := `SELECT id, name, last_sync_at, status FROM sync_log`

	var args []interface{}

	if q != nil {
		var where string
		var err error
		where, args, err = builder.ToSQL(q)
		if err != nil {
			return nil, err
		}
		query += ` WHERE ` + where
	}

	if sort != "" {
		query += ` ` + getOrderStmt(sort)
	}

	if limit != 0 {
		query += ` OFFSET ? LIMIT ?`
		args = append(args, offset)
		args = append(args, limit)
	}

	rows, err := s.db.Sync(ctx).QueryContext(ctx, query, args...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	var items []SyncLog

	for rows.Next() {
		var item SyncLog
		if err := rows.Scan(
			&item.ID,
			&item.Name,
			&item.LastSyncAt,
			&item.Status,
		); err != nil {
			return nil, err
		}

		items = append(items, item)
	}

	return items, nil
}

// Total return count(*) by params
func (s *SyncLogStorage) Total(ctx context.Context, q builder.Cond) (uint64, error) {
	query := `SELECT count(*) FROM sync_log`

	var args []interface{}

	if q != nil {
		var where string
		var err error
		where, args, err = builder.ToSQL(q)
		if err != nil {
			return 0, err
		}
		query += ` WHERE ` + where
	}

	rows, err := s.db.Sync(ctx).QueryContext(ctx, query, args...)
	if err != nil {
		return 0, err
	}
	defer rows.Close()

	var count uint64

	for rows.Next() {
		if err := rows.Scan(
			&count,
		); err != nil {
			return 0, err
		}
	}

	return count, nil
}

// Insert inserts the SyncLog to the database.
func (s *SyncLogStorage) Insert(ctx context.Context, item SyncLog) (int, error) {
	// insert (primary key generated and returned by database)
	const sqlstr = `INSERT INTO sync_log (` +
		`name, last_sync_at, status` +
		`) VALUES (` +
		`?, ?, ?` +
		`)`
	// run
	logger.Debugf(ctx, sqlstr, item.Name, item.LastSyncAt, item.Status)

	res, err := s.db.Master(ctx).ExecContext(ctx, sqlstr, item.Name, item.LastSyncAt, item.Status)
	if err != nil {
		return 0, err
	}
	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return 0, err
	}

	return int(id), nil
}

// Update updates a SyncLog in the database.
func (s *SyncLogStorage) Update(ctx context.Context, item SyncLog) error {
	// update with primary key
	const sqlstr = `UPDATE sync_log SET ` +
		`name = ?, last_sync_at = ?, status = ? ` +
		`WHERE id = ?`
	// run
	logger.Debugf(ctx, sqlstr, item.Name, item.LastSyncAt, item.Status, item.ID)
	if _, err := s.db.Master(ctx).ExecContext(ctx, sqlstr, item.Name, item.LastSyncAt, item.Status, item.ID); err != nil {
		return err
	}

	return nil
}

// Upsert performs an upsert for SyncLog.
func (s *SyncLogStorage) Upsert(ctx context.Context, item SyncLog) error {
	// upsert
	const sqlstr = `INSERT INTO sync_log (` +
		`id, name, last_sync_at, status` +
		`) VALUES (` +
		`?, ?, ?, ?` +
		`)` +
		` ON DUPLICATE KEY UPDATE ` +
		`name = VALUES(name), last_sync_at = VALUES(last_sync_at), status = VALUES(status)`
	// run
	logger.Debugf(ctx, sqlstr, item.ID, item.Name, item.LastSyncAt, item.Status)
	if _, err := s.db.Master(ctx).ExecContext(ctx, sqlstr, item.ID, item.Name, item.LastSyncAt, item.Status); err != nil {
		return err
	}

	return nil
}

// Delete deletes the SyncLog from the database.
func (s *SyncLogStorage) Delete(ctx context.Context, id int) error {
	// delete with single primary key
	const sqlstr = `DELETE FROM sync_log ` +
		`WHERE id = ?`
	// run
	logger.Debugf(ctx, sqlstr, id)

	if _, err := s.db.Master(ctx).ExecContext(ctx, sqlstr, id); err != nil {
		return err
	}

	return nil
}

// GetSyncLogByID retrieves a row from 'sync_log' as a SyncLog.
//
// Generated from index 'sync_log_id_pkey'.
func (s *SyncLogStorage) GetSyncLogByID(ctx context.Context, id int) (*SyncLog, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, name, last_sync_at, status ` +
		`FROM sync_log ` +
		`WHERE id = ?`
	// run
	logger.Debugf(ctx, sqlstr, id)
	sl := SyncLog{}
	if err := s.db.Sync(ctx).QueryRowContext(ctx, sqlstr, id).Scan(&sl.ID, &sl.Name, &sl.LastSyncAt, &sl.Status); err != nil {
		return nil, err
	}
	return &sl, nil
}
