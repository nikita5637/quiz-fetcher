// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	game "github.com/nikita5637/quiz-registrator-api/pkg/pb/game"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"
)

// GameServiceClient is an autogenerated mock type for the GameServiceClient type
type GameServiceClient struct {
	mock.Mock
}

type GameServiceClient_Expecter struct {
	mock *mock.Mock
}

func (_m *GameServiceClient) EXPECT() *GameServiceClient_Expecter {
	return &GameServiceClient_Expecter{mock: &_m.Mock}
}

// CreateGame provides a mock function with given fields: ctx, in, opts
func (_m *GameServiceClient) CreateGame(ctx context.Context, in *game.CreateGameRequest, opts ...grpc.CallOption) (*game.Game, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *game.Game
	if rf, ok := ret.Get(0).(func(context.Context, *game.CreateGameRequest, ...grpc.CallOption) *game.Game); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*game.Game)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *game.CreateGameRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GameServiceClient_CreateGame_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateGame'
type GameServiceClient_CreateGame_Call struct {
	*mock.Call
}

// CreateGame is a helper method to define mock.On call
//  - ctx context.Context
//  - in *game.CreateGameRequest
//  - opts ...grpc.CallOption
func (_e *GameServiceClient_Expecter) CreateGame(ctx interface{}, in interface{}, opts ...interface{}) *GameServiceClient_CreateGame_Call {
	return &GameServiceClient_CreateGame_Call{Call: _e.mock.On("CreateGame",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *GameServiceClient_CreateGame_Call) Run(run func(ctx context.Context, in *game.CreateGameRequest, opts ...grpc.CallOption)) *GameServiceClient_CreateGame_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*game.CreateGameRequest), variadicArgs...)
	})
	return _c
}

func (_c *GameServiceClient_CreateGame_Call) Return(_a0 *game.Game, _a1 error) *GameServiceClient_CreateGame_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PatchGame provides a mock function with given fields: ctx, in, opts
func (_m *GameServiceClient) PatchGame(ctx context.Context, in *game.PatchGameRequest, opts ...grpc.CallOption) (*game.Game, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *game.Game
	if rf, ok := ret.Get(0).(func(context.Context, *game.PatchGameRequest, ...grpc.CallOption) *game.Game); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*game.Game)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *game.PatchGameRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GameServiceClient_PatchGame_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PatchGame'
type GameServiceClient_PatchGame_Call struct {
	*mock.Call
}

// PatchGame is a helper method to define mock.On call
//  - ctx context.Context
//  - in *game.PatchGameRequest
//  - opts ...grpc.CallOption
func (_e *GameServiceClient_Expecter) PatchGame(ctx interface{}, in interface{}, opts ...interface{}) *GameServiceClient_PatchGame_Call {
	return &GameServiceClient_PatchGame_Call{Call: _e.mock.On("PatchGame",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *GameServiceClient_PatchGame_Call) Run(run func(ctx context.Context, in *game.PatchGameRequest, opts ...grpc.CallOption)) *GameServiceClient_PatchGame_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*game.PatchGameRequest), variadicArgs...)
	})
	return _c
}

func (_c *GameServiceClient_PatchGame_Call) Return(_a0 *game.Game, _a1 error) *GameServiceClient_PatchGame_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// SearchGamesByLeagueID provides a mock function with given fields: ctx, in, opts
func (_m *GameServiceClient) SearchGamesByLeagueID(ctx context.Context, in *game.SearchGamesByLeagueIDRequest, opts ...grpc.CallOption) (*game.SearchGamesByLeagueIDResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *game.SearchGamesByLeagueIDResponse
	if rf, ok := ret.Get(0).(func(context.Context, *game.SearchGamesByLeagueIDRequest, ...grpc.CallOption) *game.SearchGamesByLeagueIDResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*game.SearchGamesByLeagueIDResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *game.SearchGamesByLeagueIDRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GameServiceClient_SearchGamesByLeagueID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SearchGamesByLeagueID'
type GameServiceClient_SearchGamesByLeagueID_Call struct {
	*mock.Call
}

// SearchGamesByLeagueID is a helper method to define mock.On call
//  - ctx context.Context
//  - in *game.SearchGamesByLeagueIDRequest
//  - opts ...grpc.CallOption
func (_e *GameServiceClient_Expecter) SearchGamesByLeagueID(ctx interface{}, in interface{}, opts ...interface{}) *GameServiceClient_SearchGamesByLeagueID_Call {
	return &GameServiceClient_SearchGamesByLeagueID_Call{Call: _e.mock.On("SearchGamesByLeagueID",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *GameServiceClient_SearchGamesByLeagueID_Call) Run(run func(ctx context.Context, in *game.SearchGamesByLeagueIDRequest, opts ...grpc.CallOption)) *GameServiceClient_SearchGamesByLeagueID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*game.SearchGamesByLeagueIDRequest), variadicArgs...)
	})
	return _c
}

func (_c *GameServiceClient_SearchGamesByLeagueID_Call) Return(_a0 *game.SearchGamesByLeagueIDResponse, _a1 error) *GameServiceClient_SearchGamesByLeagueID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

type mockConstructorTestingTNewGameServiceClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewGameServiceClient creates a new instance of GameServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewGameServiceClient(t mockConstructorTestingTNewGameServiceClient) *GameServiceClient {
	mock := &GameServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
