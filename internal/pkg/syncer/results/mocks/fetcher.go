// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/nikita5637/quiz-fetcher/internal/pkg/model"
	mock "github.com/stretchr/testify/mock"
)

// Fetcher is an autogenerated mock type for the Fetcher type
type Fetcher struct {
	mock.Mock
}

type Fetcher_Expecter struct {
	mock *mock.Mock
}

func (_m *Fetcher) EXPECT() *Fetcher_Expecter {
	return &Fetcher_Expecter{mock: &_m.Mock}
}

// GetGameResult provides a mock function with given fields: ctx, externalID
func (_m *Fetcher) GetGameResult(ctx context.Context, externalID int32) (model.GameResult, error) {
	ret := _m.Called(ctx, externalID)

	var r0 model.GameResult
	if rf, ok := ret.Get(0).(func(context.Context, int32) model.GameResult); ok {
		r0 = rf(ctx, externalID)
	} else {
		r0 = ret.Get(0).(model.GameResult)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int32) error); ok {
		r1 = rf(ctx, externalID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Fetcher_GetGameResult_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGameResult'
type Fetcher_GetGameResult_Call struct {
	*mock.Call
}

// GetGameResult is a helper method to define mock.On call
//  - ctx context.Context
//  - externalID int32
func (_e *Fetcher_Expecter) GetGameResult(ctx interface{}, externalID interface{}) *Fetcher_GetGameResult_Call {
	return &Fetcher_GetGameResult_Call{Call: _e.mock.On("GetGameResult", ctx, externalID)}
}

func (_c *Fetcher_GetGameResult_Call) Run(run func(ctx context.Context, externalID int32)) *Fetcher_GetGameResult_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int32))
	})
	return _c
}

func (_c *Fetcher_GetGameResult_Call) Return(_a0 model.GameResult, _a1 error) *Fetcher_GetGameResult_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetLeagueID provides a mock function with given fields:
func (_m *Fetcher) GetLeagueID() int32 {
	ret := _m.Called()

	var r0 int32
	if rf, ok := ret.Get(0).(func() int32); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int32)
	}

	return r0
}

// Fetcher_GetLeagueID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLeagueID'
type Fetcher_GetLeagueID_Call struct {
	*mock.Call
}

// GetLeagueID is a helper method to define mock.On call
func (_e *Fetcher_Expecter) GetLeagueID() *Fetcher_GetLeagueID_Call {
	return &Fetcher_GetLeagueID_Call{Call: _e.mock.On("GetLeagueID")}
}

func (_c *Fetcher_GetLeagueID_Call) Run(run func()) *Fetcher_GetLeagueID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Fetcher_GetLeagueID_Call) Return(_a0 int32) *Fetcher_GetLeagueID_Call {
	_c.Call.Return(_a0)
	return _c
}

// GetName provides a mock function with given fields:
func (_m *Fetcher) GetName() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Fetcher_GetName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetName'
type Fetcher_GetName_Call struct {
	*mock.Call
}

// GetName is a helper method to define mock.On call
func (_e *Fetcher_Expecter) GetName() *Fetcher_GetName_Call {
	return &Fetcher_GetName_Call{Call: _e.mock.On("GetName")}
}

func (_c *Fetcher_GetName_Call) Run(run func()) *Fetcher_GetName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Fetcher_GetName_Call) Return(_a0 string) *Fetcher_GetName_Call {
	_c.Call.Return(_a0)
	return _c
}

type mockConstructorTestingTNewFetcher interface {
	mock.TestingT
	Cleanup(func())
}

// NewFetcher creates a new instance of Fetcher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewFetcher(t mockConstructorTestingTNewFetcher) *Fetcher {
	mock := &Fetcher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
