// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// GameTypeMatchStorage is an autogenerated mock type for the GameTypeMatchStorage type
type GameTypeMatchStorage struct {
	mock.Mock
}

type GameTypeMatchStorage_Expecter struct {
	mock *mock.Mock
}

func (_m *GameTypeMatchStorage) EXPECT() *GameTypeMatchStorage_Expecter {
	return &GameTypeMatchStorage_Expecter{mock: &_m.Mock}
}

// GetGameTypeByDescription provides a mock function with given fields: ctx, description
func (_m *GameTypeMatchStorage) GetGameTypeByDescription(ctx context.Context, description string) (int32, error) {
	ret := _m.Called(ctx, description)

	var r0 int32
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (int32, error)); ok {
		return rf(ctx, description)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) int32); ok {
		r0 = rf(ctx, description)
	} else {
		r0 = ret.Get(0).(int32)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, description)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GameTypeMatchStorage_GetGameTypeByDescription_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGameTypeByDescription'
type GameTypeMatchStorage_GetGameTypeByDescription_Call struct {
	*mock.Call
}

// GetGameTypeByDescription is a helper method to define mock.On call
//   - ctx context.Context
//   - description string
func (_e *GameTypeMatchStorage_Expecter) GetGameTypeByDescription(ctx interface{}, description interface{}) *GameTypeMatchStorage_GetGameTypeByDescription_Call {
	return &GameTypeMatchStorage_GetGameTypeByDescription_Call{Call: _e.mock.On("GetGameTypeByDescription", ctx, description)}
}

func (_c *GameTypeMatchStorage_GetGameTypeByDescription_Call) Run(run func(ctx context.Context, description string)) *GameTypeMatchStorage_GetGameTypeByDescription_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *GameTypeMatchStorage_GetGameTypeByDescription_Call) Return(_a0 int32, _a1 error) *GameTypeMatchStorage_GetGameTypeByDescription_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *GameTypeMatchStorage_GetGameTypeByDescription_Call) RunAndReturn(run func(context.Context, string) (int32, error)) *GameTypeMatchStorage_GetGameTypeByDescription_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewGameTypeMatchStorage interface {
	mock.TestingT
	Cleanup(func())
}

// NewGameTypeMatchStorage creates a new instance of GameTypeMatchStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewGameTypeMatchStorage(t mockConstructorTestingTNewGameTypeMatchStorage) *GameTypeMatchStorage {
	mock := &GameTypeMatchStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
