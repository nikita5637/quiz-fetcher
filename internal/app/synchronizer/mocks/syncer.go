// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// Syncer is an autogenerated mock type for the Syncer type
type Syncer struct {
	mock.Mock
}

type Syncer_Expecter struct {
	mock *mock.Mock
}

func (_m *Syncer) EXPECT() *Syncer_Expecter {
	return &Syncer_Expecter{mock: &_m.Mock}
}

// Enabled provides a mock function with given fields:
func (_m *Syncer) Enabled() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Syncer_Enabled_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Enabled'
type Syncer_Enabled_Call struct {
	*mock.Call
}

// Enabled is a helper method to define mock.On call
func (_e *Syncer_Expecter) Enabled() *Syncer_Enabled_Call {
	return &Syncer_Enabled_Call{Call: _e.mock.On("Enabled")}
}

func (_c *Syncer_Enabled_Call) Run(run func()) *Syncer_Enabled_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Syncer_Enabled_Call) Return(_a0 bool) *Syncer_Enabled_Call {
	_c.Call.Return(_a0)
	return _c
}

// GetName provides a mock function with given fields:
func (_m *Syncer) GetName() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Syncer_GetName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetName'
type Syncer_GetName_Call struct {
	*mock.Call
}

// GetName is a helper method to define mock.On call
func (_e *Syncer_Expecter) GetName() *Syncer_GetName_Call {
	return &Syncer_GetName_Call{Call: _e.mock.On("GetName")}
}

func (_c *Syncer_GetName_Call) Run(run func()) *Syncer_GetName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Syncer_GetName_Call) Return(_a0 string) *Syncer_GetName_Call {
	_c.Call.Return(_a0)
	return _c
}

// GetPeriod provides a mock function with given fields:
func (_m *Syncer) GetPeriod() time.Duration {
	ret := _m.Called()

	var r0 time.Duration
	if rf, ok := ret.Get(0).(func() time.Duration); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	return r0
}

// Syncer_GetPeriod_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPeriod'
type Syncer_GetPeriod_Call struct {
	*mock.Call
}

// GetPeriod is a helper method to define mock.On call
func (_e *Syncer_Expecter) GetPeriod() *Syncer_GetPeriod_Call {
	return &Syncer_GetPeriod_Call{Call: _e.mock.On("GetPeriod")}
}

func (_c *Syncer_GetPeriod_Call) Run(run func()) *Syncer_GetPeriod_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Syncer_GetPeriod_Call) Return(_a0 time.Duration) *Syncer_GetPeriod_Call {
	_c.Call.Return(_a0)
	return _c
}

// Sync provides a mock function with given fields: ctx
func (_m *Syncer) Sync(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Syncer_Sync_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Sync'
type Syncer_Sync_Call struct {
	*mock.Call
}

// Sync is a helper method to define mock.On call
//  - ctx context.Context
func (_e *Syncer_Expecter) Sync(ctx interface{}) *Syncer_Sync_Call {
	return &Syncer_Sync_Call{Call: _e.mock.On("Sync", ctx)}
}

func (_c *Syncer_Sync_Call) Run(run func(ctx context.Context)) *Syncer_Sync_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Syncer_Sync_Call) Return(_a0 error) *Syncer_Sync_Call {
	_c.Call.Return(_a0)
	return _c
}

type mockConstructorTestingTNewSyncer interface {
	mock.TestingT
	Cleanup(func())
}

// NewSyncer creates a new instance of Syncer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewSyncer(t mockConstructorTestingTNewSyncer) *Syncer {
	mock := &Syncer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
